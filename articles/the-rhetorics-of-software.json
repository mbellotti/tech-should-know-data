{
"title": "The Rhetorics of Software: Procedural Rhetoric and Beyond",
"authors": [
"James J. Brown"
],
"abstract": "<p><span>Living in a networked world means never really getting to decide in any thorough going way who or what enters your “space” (your laptop, your iPhone, your thermostat . . . your home). With this as a basic frame-of-reference, James J. Brown’s&nbsp;</span><em>Ethical Programs</em><span>&nbsp;examines and explores the rhetorical potential and problems of a hospitality ethos suited to a new era of hosts and guests. Brown reads a range of computational strategies and actors including the general principles underwriting the Transmission Control Protocol (TCP), which determines how packets of information can travel through the internet, to the Obama election campaign’s use of the power of protocols to reach voters, harvest their data, incentivize and, ultimately, shape their participation in the campaign. In demonstrating the kind of rhetorical spaces networked software establishes and the access it permits, prevents, and molds, Brown makes a major contribution to the emergent discourse of software studies as a major component of efforts in broad fields including media studies, rhetorical studies, and cultural studies.</span></p>",
"content": "<p><mark id=\"inline-0\" class=\"inlineNote\"><span>In addition to providing a way for rhetoricians to understand the persuasive dimensions of computation, Bogost’s <em>Persuasive Games </em>also offers a powerful critique of much of the work in digital rhetoric.</span></mark><span> Citing a number of works in the field, Bogost argues that much of this scholarship ends up “mistaking subordinate properties of the computer for primary ones.” </span><mark id=\"inline-1\" class=\"inlineNote\"><span>That is, digital rhetoricians have tended to focus on the use of computers to write, create images, or distribute arguments rather than on how computation itself can be used to craft arguments:</span></mark></p><blockquote><p><span>In short, digital rhetoric tends to focus on the presentation of traditional materials—especially text and images—without accounting for the computational underpinnings of that presentation. . . . digital rhetoric must address the role of procedurality, the unique representational property of the computer.</span></p></blockquote><p><span>For Bogost, a key example of this is Richard Lanham’s <em>Electronic Word</em>, one of the first texts to explicitly link rhetorical theory to digital technologies and a text that opened the way for a generation of digital rhetoricians. Lanham focuses on how computers can manipulate the appearance of text (something Lanham himself insists is not unique to digital technology) and does not attend to what new rhetorical possibilities emerge in computational environments. When Lanham demonstrates how the manipulations of text on screen allows us toggle between looking “at” text (noticing surface and style) and “through” text (reading for meaning), he is not necessarily telling us much about the rhetorical affordances of the computer itself. Instead, he is linking computational technologies to the rhetorical tradition without considering how such technologies might actually introduce novel rhetorical theories of persuasion, communication, or identification.</span></p><p><span>Bogost’s argument has been a necessary corrective for the field of digital rhetoric, and I myself have found the concept of procedural rhetoric extremely useful in understanding both the rhetorical capacities of software and the rhetorical nature of procedures more generally. As I have argued, procedural rhetoric becomes a useful rhetorical strategy for navigating the complex and contradictory power relations of protocological networks. However, my analysis in this book has aimed to examine the <em>rhetorics </em>(plural) of software. From exploits, which expose what’s possible in a given space, to <em>ethos, </em>which presents the digital rhetor with resources for living and arguing in deep archives, to machinic thinking, which allows for movement between the worldviews of database and narrative, I have argued for a more expansive understanding of the rhetorics of software. Procedural rhetoric offers one inroad for rhetoricians analyzing software, but it is only one of the possible rhetorics of software. In the interest of making explicit this notion of the <em>rhetorics </em>of software, I offer here a discussion of these different rhetorics. Given that the </span><mark id=\"inline-2\" class=\"inlineNote\"><span>hospitality of networked life provokes</span></mark><span>, shapes, enables, and constrains rhetorical action, I describe these rhetorics in terms of the </span><mark id=\"inline-3\" class=\"inlineNote\"><span>Law of hospitality and the laws of hospitality</span></mark><span>. If the hospitable network scrambles our rhetorical situations and forces us to instead attend to rhetorical ecologies, and if software helps to enact the ethical programs that engage the hospitality of networked life, then we require new ways of understanding how software links up with different levels of rhetorical action.</span></p><p><span>To this end, I offer three rhetorics of software—arguing <em>about </em>software, arguing <em>with </em>software, and arguing <em>in </em>software—as a way of productively reexpanding digital rhetoric beyond procedural rhetoric. These three realms of rhetorical action are not discrete or separable; all the intersecting rhetorics of software participate in complex rhetorical ecologies.</span></p><h3>Arguing about Software</h3><p><span>This is the rhetorical realm that most would imagine as the rhetorician’s primary purview: how we talk about software. While such work offers only one way of understanding the broader cultural implications of software, examining how we talk and argue about software is important. Given that more people are programming (beyond specialized disciplines such as engineering and computer science), these conversations will no doubt become more interdisciplinary and will invite the expert and the novice. The Law of hospitality extends a broad invitation. </span><mark id=\"inline-4\" class=\"inlineNote\"><span>Who will accept this invitation and what laws will be authored in response?</span></mark><span> Here, hospitality is playing out in a particularly striking way. Projects such as Code Academy, which found New York City mayor Michael Bloomberg among its pupils in 2012, are now inviting many to learn how to write code. This means that conversations about software design are expanding outward, calling on both experts and novices to analyze, critique, and write software. In addition to this mixing of expert with newcomer, our hospitable networks are also inviting interdisciplinary conversations about code, and software studies presents a key set of methods for enabling these conversations.</span></p><p><span>However, for arguments about software to happen in a productive way, all parties will require a deeper understanding of computational processes and functions. Recent work in new media studies has pushed beyond the interface, attempting to correct decades of work that treated the screen as another page. This effort is ongoing, and there is more to be done. However, these same efforts can and should be extended to spaces and conversations outside of the academy as well. This means studying (and perhaps even intervening in) arguments about software, examining how such conversations are conducted, noticing where they succeed and fail, and accounting for how power dynamics shape these arguments. The questions one might ask when approaching arguments about software are the following: How do conversations about software happen? Who participates, and who doesn’t? How inclusive are these conversations? What power relations shape arguments about software? What commonplaces circulate? Who are the overlapping and intersecting audiences for such arguments?</span></p><p><span>In previous chapters, we have seen a number of arguments about software. Chapter 3 offers some of the clearest examples of how these conversations happen in networked spaces and how such conversations will always have to respond to the predicament of hospitality. The <a href=\"https://blog.twitter.com/en_us/a/2010/all-about-the-onmouseover-incident\">Twitter onMouseover exploit</a> invited a far-reaching conversation about software, one that drew in journalists, software designers, and everyday users of Twitter. One discursive space— the website Stackoverflow.com—is of particular interest when considering arguments about software. A site that combines the functions of a wiki and a message board, Stackoverflow.com offers novice and expert a space to discuss software, to ask questions, and to enter what we might view as a complex set of master-apprentice relationships. This space may or may not cultivate a nurturing space for budding programmers or curious tinkerers, and that is largely linked to the hospitality described in this book. Networked life means that we bump up against others, whether or not we want to. The results of these collisions may bring happy results or they may alienate newcomers, but a space like Stackoverflow.com at least allows for the possibility that arguments and discussions about software can happen among those from different backgrounds. When the onMouseover exploit occupied Twitter users for part of a day (and when I myself began studying the exploit and its aftermath), this site became a useful resource for those seeking explanations. These arguments and discussions about the exploit were one level of that particular rhetorical ecology, one of the rhetorics of software circulating around this event.</span></p><p><span>Arguments and discussions about the other exploit examined in chapter 3—the OAuth exploit—took a decidedly different shape. While the on- Mouseover exploit forced a conversation that mixed expert with novice and programmer with user, the OAuth exploit happened among a relatively small circle of programmers, designers, and executives. While this exploit triggered arguments about software, those arguments circulated quite differently, and the result of this discussion was that the exploit was addressed prior to wreaking havoc on users. Happening behind closed doors before being shared with a broader public, this argument about software revealed a very different rhetorical ecology and involved different kinds of power dynamics, but the results of the OAuth exploit were no less important to users than the results of the onMouseover exploit. In fact, we could argue that the implications of the OAuth exploit were much more far reaching, even if a smaller number of people were involved in how it was addressed. The OAuth exploit had the potential to expose a great number of users to a security vulnerability that would have allowed a third-party application to act on their behalf. While the onMouseover exploit demonstrated a relatively low stakes vulnerability, the hack of OAuth could have caused much more harm. </span><mark id=\"inline-6\" class=\"inlineNote\"><span>Understanding how conversations emerge and happen in the wake of such exploits is crucial for the digital rhetorician interested in understanding how software is discussed, addressed, and reshaped by rhetorical exchange.</span></mark></p><p><span>While chapter 3’s discussion of exploits offers one of the clearest examples of arguing about software, we saw this same level of rhetorical activity at play in discussions of the MyBO software, as critics analyzed how the campaign used different systems to motivate volunteers and to guide volunteers to certain activities. These conversations happened among people involved in political campaigning, but they also happened among software developers whose primary interests and expertise lie outside the realm of campaigning and volunteer coordination. Once again, this was a wide-ranging discussion involving multiple constituencies and levels of expertise. Discussions among journalists regarding </span><mark id=\"inline-7\" class=\"inlineNote\"><span>Narrative Science</span></mark><span>’s robot journalists fall into this category as well. Those discussions reflected a great deal of suspicion for many reasons, not the least of which was that journalists felt that their livelihood was being threatened by algorithmic journalists. This was a completely understandable (and in many ways, justified) response, but it is a response that would benefit from a deeper and broader discussion of code and computation. Narrative Science itself is an interesting model for this kind of conversation, given that it employs both programmers and journalists. The company’s robot writers are the result of many conversations about software, conversations that inform how the software is written. This movement from arguing about software to the practice of composing the software itself brings us to our next level of rhetorical activity.</span></p><h3>Arguing with Software</h3><p><span>Arguing about software is never sealed off from how we argue <em>with </em>software, how we <em>use </em>software, code, and computational procedures to make arguments. If arguing about software becomes more complex because of a hospitable network that both welcomes and shuns participants to a discussion, then arguing with software increases in complexity because of the hospitable network’s penchant for simultaneously welcoming and turning away hacks, exploits, and other bits of code. Hospitable networks mean that hacking and exploring the possibilities of computational environments are within the scope of rhetorical action. But the “with” here can also be taken another way. While we can use software as a tool for expression and argumentation (as in when we say we are writing “with” a pencil), we might also see soft- ware systems as an interlocutor (as in when we say we are arguing “with” another person). These two uses of “with” are not separate—when I attempt to use computation to build an argument, I work with and struggle against the affordances of a given platform or language. </span><mark id=\"inline-8\" class=\"inlineNote\"><span>While the end result might be an argument expressed by way of software, I have a number of rhetorical exchanges with the software itself—as I write code, I’m writing for multiple human and machine audiences.</span></mark><span> Arguing with software is a concept meant to account for this entire complex set of relations.</span></p><p><span>To again take the Twitter exploits of chapter 3 as an example, both conversations about these exploits <em>and the exploits themselves </em>are part of the various, circulating, and overlapping rhetorics of software in this ecology. When Kinugawa and others created exploits that exposed a flaw in Twitter’s URL parser, they were using software in the interest of rhetorical action. They were both attempting to persuade Twitter to address a security flaw and helping to reveal the possible means of persuasion in this space. Invited by networked software that continuously negotiates between absolute and measured hospitality, between the Law and the laws, these ethical programs expose what is or is not possible in a given space. But more than just initiating a discussion about software (arguing about), Kinugawa, Holm, and the others who circulated the onMouseover exploit used computation itself to make arguments, and they did so by negotiating with the software itself. They performed an ethical argument by way of computation (software as tool) by interacting with and exploiting gaps in the software itself (software as interlocutor).</span></p><p><span>The exploit is one particularly powerful way of arguing with software, but it is of course coupled with procedural rhetoric. Here the Obama campaign’s use of social networking software to funnel users to particular activities comes to mind. The MyBO software was certainly a tool for more efficiently organizing volunteers, but it was also a collection of procedural arguments made by the campaign about how (or <em>whether</em>) volunteers might engage opposing arguments. Given a networked campaign infrastructure that purported to invite volunteers to help craft and shape a message, this use of procedural rhetoric is all the more interesting. For while the campaign argued with software, using procedural rhetoric to help control a protocological network, volunteers also used procedural arguments to write back against the campaign and navigate the complex power dynamics of networked power. </span><mark id=\"inline-9\" class=\"inlineNote\"><span>The volunteer-authored procedural arguments covered in chapter 2 are not examples of arguing with software</span></mark><span> (even if they are examples of procedural arguments), but this only further demonstrates that all of these rhetorics of software intersect and overlap with one another. Engaging the procedural arguments expressed, in part, by software, Obama campaign volunteers used a similar strategy by translating those strategies into other media, such as phone-banking scripts.</span></p><p><span>MediaWiki also offers an example of arguing with software, though in this case the arguments are less overt and not as loaded with a particular political program. By considering each keystroke as crucial to the integrity of the database and by welcoming all of this data into its deep textual archive, MediaWiki engages the predicament of hospitality by attempting to absorb all information and not determining ahead of time what is or is not useful or relevant. When usernames and article titles are considered equal in the eyes of the database, we can begin to see MediaWiki as a piece of software that responds to the Law of hospitality by crafting a set of laws, laws that use software to make arguments about how textual discussions should happen and what information should be tracked. The designers of MediaWiki may or may not have had these particular arguments in mind when building the software, but the arguments are nonetheless there, shaping what can or cannot happen as writers edit and create articles or conduct conversations about policy. Chapter 4 explains how this plays out in the most famous MediaWiki installation in the world—Wikipedia. If MediaWiki is an argument made with software, that argument reveals itself in complex ways as Wikipedians try to argue <em>in </em>this software environment (a level of rhetorical activity taken up in the next section). MediaWiki’s hospitable database also means that users must engage in arguments with the software itself, and we see this most clearly as Larry Sanger’s Citizendium project attempts to work both with and against the affordances of the software. Having to build a credentialing system on top of a system that is designed to exclude credentials as an elevated form of evidence means that the software becomes a party to rhetorical exchange. Sanger and the designers of Citizendium’s MediaWiki installation had to argue and struggle with MediaWiki in order to build the kind of dwelling they envisioned.</span></p><p><span>The questions a rhetorician might ask when exploring arguing <em>with </em>software are myriad: How hackable are computational spaces? What kinds of ethical assumptions and arguments are made by software platforms? Who or what is able to manipulate and exploit such platforms? Who or what stands at the thresholds, determining what can or cannot happen in networked spaces? What are the means of persuasion available to those coding and recoding computational environments? How does software design change if we begin to see software as interlocutor and audience? How do designers engage with the affordances and constraints of a platform or language, and what kinds of “conversations” emerge from such interactions? From APIs to URL parsers, software designers and writers help to construct ethical programs, and it is at these thresholds that we can best notice the complexity of how ethical programs must continually engage the arrival of others. As more and more others arrive, networked spaces will have to account for how bits of code are being used to argue and how software is being used to expand or expose the possible means of persuasion.</span></p><h3>Arguing in Software</h3><p><span>Software helps to shape, enable, and constrain rhetorical action. Given the ubiquity of software, an increasing number of rhetorical ecologies are happening <em>in </em>software environments, meaning that rhetoricians and scholars of all stripes should be attempting to understanding how persuasive acts emerge in such environments. The Law of hospitality plays a key role here by welcoming data, by storing and tracking nearly any keystroke. What rhetorical strategies are most effective in such spaces? How do humans and computational programs deal with this Law of hospitality? Software addresses this Law with some of its own laws, by building deep archives of information. But these ethical programs in turn shape those of humans, who must now address the complex rhetorical ecologies shaped by these archives. Networked spaces encourage certain kinds of strategies and modes of argument, and I have traced a number of these throughout this book. Each of these rhetorical strategies emerge out of software environments and the computational spaces that accumulate data. As we interact with software and as that software serves to help shape rhetorical interactions, it becomes important to understand what strategies are encouraged and foreclosed by software.</span></p><p><span>In MediaWiki’s deep archive, <em>ethos </em>emerges as a crucial rhetorical strategy. The controversy surrounding </span><mark id=\"inline-10\" class=\"inlineNote\"><span>Essjay</span></mark><span> shows us that MediaWiki’s penchant for textual accumulation makes <em>ethos </em>the primary way by which Wikipedians both make and critique arguments. MediaWiki is driven by an ethic of database integrity, and it operates most effectively when all information is archived. Even malicious edits are often retained in the edit history of Wikipedia articles, demonstrating that even seemingly “useless” data is kept and archived. In another example of this somewhat radical hospitality, those Wikipedians who attempt to change usernames and identities are thwarted by an archive that keeps track of username changes. Logs of user activity link old usernames to new ones. MediaWiki’s ethical programs are best understood in terms of this guiding ethic—the desire to archive rather than to delete. There are certainly exceptions to this rule, but this generalized ethic of preservation stands as what best defines this software dwelling (its <em>ethos</em>). Essjay was arguing in this environment, and he benefited from this archive as he built up credibility as a tenured academic. Anyone curious as to why he was carrying weight in a discussion need only have looked at his user page or his previous edits to learn that he was a theological expert. However, he was undone by this same aspect of Wikipedia’s dwelling, and his <em>ethos </em>crumbled when it was discovered that his situated <em>ethos</em>—the portion of <em>ethos </em>that is supposed to precede the rhetor and to be outside of his or her control—was in fact an <em>invented ethos</em>. MediaWiki played an important role in both the creation and destruction of Essjay, and that role is best understood in terms of how Wikipedians argue in software, taking advantage of (or suffering at the hands of ) the particular affordances of software environments.</span></p><p><span>The examples from chapter 4 make arguing in software even more complex, since the robot journalists circulating through networked life are operating alongside humans in rhetorical ecologies. The algorithms authored to generate news stories are an example of arguing with software—of crafting computational procedures that make arguments about which information is most important and how a narrative should be structured. However, I have argued that the bots themselves present us with key strategies for operating, persuading, and communicating <em>in </em>software environments. By using procedures to sift and sort data and by transforming data into narratives, these bots remind us that the generation of narrative and argument is always, in some sense, machinic. Rhetoric, as a set of procedures for generating and critiquing arguments, offers a long tradition of understanding how to move between the worldviews of narrative and database (although ancient rhetoricians would of course never have put it in these terms). While arguing in software environments that welcome data and that intensifies a situation of “information overload,” users can turn to the “meta-writers” of Narrative Science and to the increasing number of computational machines generating narratives for inspiration. </span><mark id=\"inline-11\" class=\"inlineNote\"><span>Given that the relationship between narrative and database is increasingly complex, we can turn to machinic thinking as we develop strategies for arguing in software.</span></mark></p><p><span>The case of procedural rhetoric is also interesting in this regard, since it becomes both a way to argue <em>with </em>and <em>in </em>software. We can craft computational processes that make arguments, and I have demonstrated the complexity of such actions in the preceding chapters, showing that exploits, procedural arguments, and less explicit arguments in platforms like MediaWiki demonstrate how computational procedures make arguments and engage the Law of hospitality. However, the phone-banking scripts of Obama campaign volunteers show how we can also craft other types of processes that make arguments. The authors of these scripts engaged (or chose not to engage) opposing arguments, and these choices were made by volunteers who accepted the campaign’s invitation to participate. Stepping into a software environment (MyBO) that generated lists of possible voters, clicking through those lists, and making phone calls, the actions of these volunteers were shaped in im- portant ways by the campaign’s procedural rhetorics. However, the phone- banking scripts were very different kinds of procedures in that volunteers did not execute them in the same way a computational machine executes a procedure. Instead, volunteers rewrote the scripts in the interest of different kinds of procedural arguments. Here procedural rhetoric sits both in the computational environment of the campaign’s software and in the volunteers’ use of procedures to engage possible voters. </span><mark id=\"inline-12\" class=\"inlineNote\"><span>Such hinge points between the different rhetorics of software—the different layers of rhetorical activity in networked, computational spaces—present us with rich possibilities for cultivating complex accounts of rhetorical ecologies.</span></mark><span> Understanding procedurality as a mode of inscription that can be enacted in both computational media and discursively is but one place where we might notice software’s promise as a participant in rhetorical ecologies.</span></p><p><span>Given how much contemporary rhetorical action happens in software environments, the rhetorician of software can begin to ask: What are the affordances of certain software platforms, and how do users take advantage of or fall prey to those affordances? What persuasive strategies are opened up and closed off by certain software environments? How do user activities lead to changes in software platforms, shifting the available means of persuasion? What does the wide-scale adoption of certain software platforms (from Microsoft Office to Facebook) mean for the possibilities of rhetorical action? How do users take up software in unexpected ways, revealing expressive possibilities within an environment in ways that designers never imagined?</span></p>",
"submissionBy": {
"name": "Marianne Bellotti",
"link": "www.bellotti.tech"
},
"notes": [
{
"id": "0",
"text": "This is an excerpt from Brown's book <em>Ethical Programs: Hospitality and the Rhetorics of Software</em> which is available via Open Access but you should also consider buying a copy of! It was one of my favorite reads of 2023 and a fascinating look at the question of software ethics through the lens of rhetoric."
},
{
"id": "1",
"text": "The five components (canons) of rhetoric are: <ol>\n<li>Invention: coming up with what you want to express.</li>\n<li>Arrangement: deciding how to order the information within the argument</li>\n<li>Style: coming up with the actual words that will be used</li>\n<li>Memory: committing a text to memory (either human or hard drive).</li>\n<li>Delivery: presenting a text to an audience.</li></ol>\nBrown's argument here is that software can influence or shape multiple components of rhetoric at the same time, perhaps without the software creature or user being fully aware of it. Software can create a feedback loop with itself where it is both delivering the message and shaping the arrangement or style of the message. Brown's thinking is that this ambiguity can create ethical conflicts that become noticeable as the software gains traction."
},
{
"id": "2",
"text": "This is a reference to a framework introduced earlier in the book, in which Brown discusses the concept of a \"host\" machine in terms of hospitality. Is the user a guest on a platform owned by someone else, or is the digital space allotted to the user within software considered <em>their</em> space with an expectation of privacy? In other words, why do we expect Google not to read our emails? Why does it bother us when Facebook mines our private data? Who is the guest and who is the host in a given arrangement of code? "
},
{
"id": "3",
"text": "The Law is the technical protocol that allows the guest and hosts to even interact with each other in the first place (in other words TCP/IP standard) whereas <em>the laws</em> are the flexible, conditional rules written into software restricting or allowing specific individual interactions. "
},
{
"id": "4",
"text": "In other words: who logs on and how will they filter the entire population of the internet to determine who they are speaking to?"
},
{
"id": "6",
"text": "Arguing about software, therefore, is the discussion of software itself--best practices, syntax and structural characteristics, etc. What's interesting about the Stack Overflow example is that Stack Overflow restricts what you can do on the site by your reputation points and people often back their answers up with code samples ... so in Brown's framework people argue ABOUT software In software WITH software all on the same platform and perhaps with the same single action."
},
{
"id": "7",
"text": "A case study from earlier in the book about baseball game summaries being written via algorithm rather than human sports writer."
},
{
"id": "8",
"text": "Brown's point here is once we've connected to the internet, we usually have to satisfy a bunch of additional requirement before we are permitted to communicate via the internet to other human beings (for example we might need to login, or have an account of a certain age or activity level, or be \"friends\" with a given user) These additional rules are invariably expressed and determined with software. Therefore as a user when I go through the process of satisfying those requirements to post or message I am in effect arguing with the software itself, trying to persuade it to give me permission to communicate."
},
{
"id": "9",
"text": "This is a reference to how Obama volunteers used the digital platform to shared strategies for common problems."
},
{
"id": "10",
"text": "Essjay was the prominent Wikipedian who turned out to be a fraud."
},
{
"id": "11",
"text": "The premise here is the extent to which software itself becomes the demonstration of the point being made. A Stack Overflow user might include a code sample in their response, creating software that serves as an expression of what best practices otherwise outlined in natural language might look like in code. Or someone might create an interactive visualization, communicating their argument via code."
},
{
"id": "12",
"text": "While these layers can feel overwhelming, I think the point Brown is trying to make it that the way these layer interact creates behaviors that might be surprising or undesirable. Especially if the reality does not match the intention of the software developer."
}
],
"references": [],
"works": [
{
"link_title": "Ethical Programs (Open Acces)",
"link_url": "https://directory.doabooks.org/handle/20.500.12854/114226"
}
],
"tags": [
"rhetoric",
"programming",
"code",
"human computer interaction"
]
}